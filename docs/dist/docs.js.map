{"version":3,"sources":["docs/src/js/docs.js","src/js/config.js","src/js/utils/is.js","src/js/utils/numbers.js","src/js/rangetouch.js","src/js/utils/css.js","src/js/utils/events.js"],"names":["defaults","addCSS","thumbWidth","watch","vertical","getConstructor","input","constructor","instanceOf","isNullOrUndefined","isObject","Object","isString","String","isArray","Array","isNodeList","NodeList","is","Element","Event","length","keys","round","number","step","places","value","match","Math","max","getDecimalPlaces","parseFloat","toFixed","RangeTouch","target","options","this","element","document","querySelector","rangeTouch","config","init","enabled","documentElement","static","arguments","targets","from","querySelectorAll","filter","observer","MutationObserver","mutations","forEach","mutation","addedNodes","node","selector","includes","call","matches","observe","body","childList","subtree","map","t","style","userSelect","webKitUserSelect","touchAction","listeners","destroy","toggle","method","type","event","set","get","touch","changedTouches","min","getAttribute","percent","clientRect","getBoundingClientRect","width","height","clientY","top","clientX","left","disabled","preventDefault","bubbles","dispatchEvent","trigger","loadSprite","url","xhr","XMLHttpRequest","open","onload","container","createElement","setAttribute","innerHTML","responseText","insertBefore","childNodes","send","addEventListener","window","shr","setup","count","classname"],"mappings":"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","file":"docs.js","sourcesContent":["// ==========================================================================\n// Docs example\n// ==========================================================================\n\nimport RangeTouch from '../../../src/js/rangetouch';\n\nconst loadSprite = url => {\n    const xhr = new XMLHttpRequest();\n    const { body } = document;\n\n    // Check for CORS support\n    // If you're loading from same domain, you can remove the whole if/else statement\n    // XHR for Chrome/Firefox/Opera/Safari/IE10+\n    if (!('withCredentials' in xhr)) {\n        return;\n    }\n\n    xhr.open('GET', url, true);\n\n    // Inject hidden div with sprite on load\n    xhr.onload = () => {\n        const container = document.createElement('div');\n        container.setAttribute('hidden', '');\n        container.innerHTML = xhr.responseText;\n        body.insertBefore(container, body.childNodes[0]);\n    };\n\n    xhr.send();\n};\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    // Load the sprite\n    ['dist/docs.svg'].forEach(loadSprite);\n\n    // Setup shr\n    window.shr.setup({\n        count: {\n            classname: 'btn__count',\n        },\n    });\n\n    // Set range thumb size\n    RangeTouch.setup('.js-example', { thumbWidth: 20 });\n    RangeTouch.setup('.js-example-vertical', { thumbWidth: 0, vertical: true });\n});\n","const defaults = {\n    addCSS: true, // Add CSS to the element to improve usability (required here or in your CSS!)\n    thumbWidth: 15, // The width of the thumb handle\n    watch: true, // Watch for new elements that match a string target\n    vertical: false,\n};\n\nexport default defaults;\n","// ==========================================================================\n// Type checking utils\n// ==========================================================================\n\nconst getConstructor = input => (input !== null && typeof input !== 'undefined' ? input.constructor : null);\nconst instanceOf = (input, constructor) => Boolean(input && constructor && input instanceof constructor);\n\nconst isNullOrUndefined = input => input === null || typeof input === 'undefined';\nconst isObject = input => getConstructor(input) === Object;\nconst isNumber = input => getConstructor(input) === Number && !Number.isNaN(input);\nconst isString = input => getConstructor(input) === String;\nconst isBoolean = input => getConstructor(input) === Boolean;\nconst isFunction = input => getConstructor(input) === Function;\nconst isArray = input => Array.isArray(input);\nconst isNodeList = input => instanceOf(input, NodeList);\nconst isElement = input => instanceOf(input, Element);\nconst isEvent = input => instanceOf(input, Event);\nconst isEmpty = input =>\n    isNullOrUndefined(input) ||\n    ((isString(input) || isArray(input) || isNodeList(input)) && !input.length) ||\n    (isObject(input) && !Object.keys(input).length);\n\nexport default {\n    nullOrUndefined: isNullOrUndefined,\n    object: isObject,\n    number: isNumber,\n    string: isString,\n    boolean: isBoolean,\n    function: isFunction,\n    array: isArray,\n    nodeList: isNodeList,\n    element: isElement,\n    event: isEvent,\n    empty: isEmpty,\n};\n","// Get the number of decimal places\nexport function getDecimalPlaces(value) {\n    const match = `${value}`.match(/(?:\\.(\\d+))?(?:[eE]([+-]?\\d+))?$/);\n\n    if (!match) {\n        return 0;\n    }\n\n    return Math.max(\n        0,\n        // Number of digits right of decimal point.\n        (match[1] ? match[1].length : 0) -\n            // Adjust for scientific notation.\n            (match[2] ? +match[2] : 0),\n    );\n}\n\n// Round to the nearest step\nexport function round(number, step) {\n    if (step < 1) {\n        const places = getDecimalPlaces(step);\n        return parseFloat(number.toFixed(places));\n    }\n    return Math.round(number / step) * step;\n}\n\nexport default { getDecimalPlaces, round };\n","// ==========================================================================\n// rangetouch.js v2.0.1\n// Making <input type=\"range\"> work on touch devices\n// https://github.com/sampotts/rangetouch\n// License: The MIT License (MIT)\n// ==========================================================================\n\nimport defaults from './config';\nimport {matches} from './utils/css';\nimport {trigger} from './utils/events';\nimport is from './utils/is';\nimport {round} from './utils/numbers';\n\nclass RangeTouch {\n    /**\n     * Setup a new instance\n     * @param {String|Element} target\n     * @param {Object} options\n     */\n    constructor(target, options) {\n        if (is.element(target)) {\n            // An Element is passed, use it directly\n            this.element = target;\n        } else if (is.string(target)) {\n            // A CSS Selector is passed, fetch it from the DOM\n            this.element = document.querySelector(target);\n        }\n\n        if (!is.element(this.element) || !is.empty(this.element.rangeTouch)) {\n            return;\n        }\n\n        this.config = {...defaults, ...options};\n\n        this.init();\n    }\n\n    static get enabled() {\n        return 'ontouchstart' in document.documentElement;\n    }\n\n    /**\n     * Setup multiple instances\n     * @param {String|Element|NodeList|Array} target\n     * @param {Object} options\n     */\n    static setup(target, options = {}) {\n        let targets = null;\n\n        if (is.empty(target) || is.string(target)) {\n            targets = Array.from(document.querySelectorAll(is.string(target) ? target : 'input[type=\"range\"]'));\n        } else if (is.element(target)) {\n            targets = [target];\n        } else if (is.nodeList(target)) {\n            targets = Array.from(target);\n        } else if (is.array(target)) {\n            targets = target.filter(is.element);\n        }\n\n        if (is.empty(targets)) {\n            return null;\n        }\n\n        const config = {...defaults, ...options};\n\n        if (is.string(target) && config.watch) {\n            // Create an observer instance\n            const observer = new MutationObserver(mutations => {\n                Array.from(mutations).forEach(mutation => {\n                    Array.from(mutation.addedNodes).forEach(node => {\n                        if (!is.element(node) || !matches(node, target)) {\n                            return;\n                        }\n\n                        // eslint-disable-next-line no-unused-vars\n                        const range = new RangeTouch(node, config);\n                    });\n                });\n            });\n\n            // Pass in the target node, as well as the observer options\n            observer.observe(document.body, {\n                childList: true,\n                subtree: true,\n            });\n        }\n\n        return targets.map(t => new RangeTouch(t, options));\n    }\n\n    init() {\n        // Bail if not a touch enabled device\n        if (!RangeTouch.enabled) {\n            return;\n        }\n\n        // Add useful CSS\n        if (this.config.addCSS) {\n            this.element.style.userSelect = 'none';\n            this.element.style.webKitUserSelect = 'none';\n            this.element.style.touchAction = 'manipulation';\n        }\n\n        this.listeners(true);\n\n        this.element.rangeTouch = this;\n    }\n\n    destroy() {\n        // Bail if not a touch enabled device\n        if (!RangeTouch.enabled) {\n            return;\n        }\n\n        // Remove useful CSS\n        if (this.config.addCSS) {\n            this.element.style.userSelect = '';\n            this.element.style.webKitUserSelect = '';\n            this.element.style.touchAction = '';\n        }\n\n        this.listeners(false);\n\n        this.element.rangeTouch = null;\n    }\n\n    listeners(toggle) {\n        const method = toggle ? 'addEventListener' : 'removeEventListener';\n\n        // Listen for events\n        ['touchstart', 'touchmove', 'touchend'].forEach(type => {\n            this.element[method](type, event => this.set(event), false);\n        });\n    }\n\n    /**\n     * Get the value based on touch position\n     * @param {Event} event\n     */\n    get(event) {\n        if (!RangeTouch.enabled || !is.event(event)) {\n            return null;\n        }\n\n        const input = event.target;\n        const touch = event.changedTouches[0];\n        const min = parseFloat(input.getAttribute('min')) || 0;\n        const max = parseFloat(input.getAttribute('max')) || 100;\n        const step = parseFloat(input.getAttribute('step')) || 1;\n        const delta = max - min;\n\n        // Calculate percentage\n        let percent;\n        const clientRect = input.getBoundingClientRect();\n        const thumbWidth = ((100 / clientRect.width) * (this.config.thumbWidth / 2)) / 100;\n\n        // Determine left percentage\n        if (this.config.vertical) {\n            percent = 100 - 100 / clientRect.height * (touch.clientY - clientRect.top);\n        } else {\n            percent = (100 / clientRect.width) * (touch.clientX - clientRect.left);\n        }\n\n        // Don't allow outside bounds\n        if (percent < 0) {\n            percent = 0;\n        } else if (percent > 100) {\n            percent = 100;\n        }\n\n        // Factor in the thumb offset\n        if (percent < 50) {\n            percent -= (100 - percent * 2) * thumbWidth;\n        } else if (percent > 50) {\n            percent += (percent - 50) * 2 * thumbWidth;\n        }\n\n        // Find the closest step to the mouse position\n        return min + round(delta * (percent / 100), step);\n    }\n\n    /**\n     * Update range value based on position\n     * @param {Event} event\n     */\n    set(event) {\n        if (!RangeTouch.enabled || !is.event(event) || event.target.disabled) {\n            return;\n        }\n\n        // Prevent text highlight on iOS\n        event.preventDefault();\n\n        // Set value\n        // eslint-disable-next-line no-param-reassign\n        event.target.value = this.get(event);\n\n        // Trigger event\n        trigger(event.target, event.type === 'touchend' ? 'change' : 'input');\n    }\n}\n\nexport default RangeTouch;\n","// Element matches a selector\nexport function matches(element, selector) {\n    const prototype = { Element };\n\n    function match() {\n        return Array.from(document.querySelectorAll(selector)).includes(this);\n    }\n\n    const method =\n        prototype.matches ||\n        prototype.webkitMatchesSelector ||\n        prototype.mozMatchesSelector ||\n        prototype.msMatchesSelector ||\n        match;\n\n    return method.call(element, selector);\n}\n\nexport default { matches };\n","// Trigger event\nexport function trigger(element, type) {\n    if (!element || !type) {\n        return;\n    }\n\n    // Create and dispatch the event\n    const event = new Event(type, { bubbles: true });\n\n    // Dispatch the event\n    element.dispatchEvent(event);\n}\n\nexport default { trigger };\n"]}