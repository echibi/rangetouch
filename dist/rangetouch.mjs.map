{"version":3,"sources":["src/js/config.js","src/js/utils/css.js","src/js/utils/events.js","src/js/rangetouch.js","src/js/utils/is.js","src/js/utils/numbers.js"],"names":["defaults","addCSS","thumbWidth","watch","vertical","matches","element","selector","Array","from","document","querySelectorAll","includes","this","call","trigger","type","event","Event","bubbles","dispatchEvent","getConstructor","input","constructor","instanceOf","isNullOrUndefined","isObject","Object","isNumber","Number","isNaN","isString","String","isBoolean","Boolean","isFunction","Function","isArray","isNodeList","NodeList","isElement","Element","isEvent","isEmpty","length","keys","is","nullOrUndefined","object","number","string","boolean","function","array","nodeList","empty","getDecimalPlaces","value","match","Math","max","round","step","places","parseFloat","toFixed","RangeTouch","target","options","querySelector","rangeTouch","config","init","enabled","documentElement","static","arguments","targets","filter","MutationObserver","mutations","forEach","mutation","addedNodes","node","observe","body","childList","subtree","map","t","style","userSelect","webKitUserSelect","touchAction","listeners","destroy","toggle","method","set","get","touch","changedTouches","min","getAttribute","percent","clientRect","getBoundingClientRect","width","height","clientY","top","clientX","left","disabled","preventDefault"],"mappings":"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","file":"rangetouch.mjs","sourcesContent":["const defaults = {\n    addCSS: true, // Add CSS to the element to improve usability (required here or in your CSS!)\n    thumbWidth: 15, // The width of the thumb handle\n    watch: true, // Watch for new elements that match a string target\n    vertical: false,\n};\n\nexport default defaults;\n","// Element matches a selector\nexport function matches(element, selector) {\n    const prototype = { Element };\n\n    function match() {\n        return Array.from(document.querySelectorAll(selector)).includes(this);\n    }\n\n    const method =\n        prototype.matches ||\n        prototype.webkitMatchesSelector ||\n        prototype.mozMatchesSelector ||\n        prototype.msMatchesSelector ||\n        match;\n\n    return method.call(element, selector);\n}\n\nexport default { matches };\n","// Trigger event\nexport function trigger(element, type) {\n    if (!element || !type) {\n        return;\n    }\n\n    // Create and dispatch the event\n    const event = new Event(type, { bubbles: true });\n\n    // Dispatch the event\n    element.dispatchEvent(event);\n}\n\nexport default { trigger };\n","// ==========================================================================\n// rangetouch.js v2.0.1\n// Making <input type=\"range\"> work on touch devices\n// https://github.com/sampotts/rangetouch\n// License: The MIT License (MIT)\n// ==========================================================================\n\nimport defaults from './config';\nimport {matches} from './utils/css';\nimport {trigger} from './utils/events';\nimport is from './utils/is';\nimport {round} from './utils/numbers';\n\nclass RangeTouch {\n    /**\n     * Setup a new instance\n     * @param {String|Element} target\n     * @param {Object} options\n     */\n    constructor(target, options) {\n        if (is.element(target)) {\n            // An Element is passed, use it directly\n            this.element = target;\n        } else if (is.string(target)) {\n            // A CSS Selector is passed, fetch it from the DOM\n            this.element = document.querySelector(target);\n        }\n\n        if (!is.element(this.element) || !is.empty(this.element.rangeTouch)) {\n            return;\n        }\n\n        this.config = {...defaults, ...options};\n\n        this.init();\n    }\n\n    static get enabled() {\n        return 'ontouchstart' in document.documentElement;\n    }\n\n    /**\n     * Setup multiple instances\n     * @param {String|Element|NodeList|Array} target\n     * @param {Object} options\n     */\n    static setup(target, options = {}) {\n        let targets = null;\n\n        if (is.empty(target) || is.string(target)) {\n            targets = Array.from(document.querySelectorAll(is.string(target) ? target : 'input[type=\"range\"]'));\n        } else if (is.element(target)) {\n            targets = [target];\n        } else if (is.nodeList(target)) {\n            targets = Array.from(target);\n        } else if (is.array(target)) {\n            targets = target.filter(is.element);\n        }\n\n        if (is.empty(targets)) {\n            return null;\n        }\n\n        const config = {...defaults, ...options};\n\n        if (is.string(target) && config.watch) {\n            // Create an observer instance\n            const observer = new MutationObserver(mutations => {\n                Array.from(mutations).forEach(mutation => {\n                    Array.from(mutation.addedNodes).forEach(node => {\n                        if (!is.element(node) || !matches(node, target)) {\n                            return;\n                        }\n\n                        // eslint-disable-next-line no-unused-vars\n                        const range = new RangeTouch(node, config);\n                    });\n                });\n            });\n\n            // Pass in the target node, as well as the observer options\n            observer.observe(document.body, {\n                childList: true,\n                subtree: true,\n            });\n        }\n\n        return targets.map(t => new RangeTouch(t, options));\n    }\n\n    init() {\n        // Bail if not a touch enabled device\n        if (!RangeTouch.enabled) {\n            return;\n        }\n\n        // Add useful CSS\n        if (this.config.addCSS) {\n            this.element.style.userSelect = 'none';\n            this.element.style.webKitUserSelect = 'none';\n            this.element.style.touchAction = 'manipulation';\n        }\n\n        this.listeners(true);\n\n        this.element.rangeTouch = this;\n    }\n\n    destroy() {\n        // Bail if not a touch enabled device\n        if (!RangeTouch.enabled) {\n            return;\n        }\n\n        // Remove useful CSS\n        if (this.config.addCSS) {\n            this.element.style.userSelect = '';\n            this.element.style.webKitUserSelect = '';\n            this.element.style.touchAction = '';\n        }\n\n        this.listeners(false);\n\n        this.element.rangeTouch = null;\n    }\n\n    listeners(toggle) {\n        const method = toggle ? 'addEventListener' : 'removeEventListener';\n\n        // Listen for events\n        ['touchstart', 'touchmove', 'touchend'].forEach(type => {\n            this.element[method](type, event => this.set(event), false);\n        });\n    }\n\n    /**\n     * Get the value based on touch position\n     * @param {Event} event\n     */\n    get(event) {\n        if (!RangeTouch.enabled || !is.event(event)) {\n            return null;\n        }\n\n        const input = event.target;\n        const touch = event.changedTouches[0];\n        const min = parseFloat(input.getAttribute('min')) || 0;\n        const max = parseFloat(input.getAttribute('max')) || 100;\n        const step = parseFloat(input.getAttribute('step')) || 1;\n        const delta = max - min;\n\n        // Calculate percentage\n        let percent;\n        const clientRect = input.getBoundingClientRect();\n        const thumbWidth = ((100 / clientRect.width) * (this.config.thumbWidth / 2)) / 100;\n\n        // Determine left percentage\n        if (this.config.vertical) {\n            percent = 100 - 100 / clientRect.height * (touch.clientY - clientRect.top);\n        } else {\n            percent = (100 / clientRect.width) * (touch.clientX - clientRect.left);\n        }\n\n        // Don't allow outside bounds\n        if (percent < 0) {\n            percent = 0;\n        } else if (percent > 100) {\n            percent = 100;\n        }\n\n        // Factor in the thumb offset\n        if (percent < 50) {\n            percent -= (100 - percent * 2) * thumbWidth;\n        } else if (percent > 50) {\n            percent += (percent - 50) * 2 * thumbWidth;\n        }\n\n        // Find the closest step to the mouse position\n        return min + round(delta * (percent / 100), step);\n    }\n\n    /**\n     * Update range value based on position\n     * @param {Event} event\n     */\n    set(event) {\n        if (!RangeTouch.enabled || !is.event(event) || event.target.disabled) {\n            return;\n        }\n\n        // Prevent text highlight on iOS\n        event.preventDefault();\n\n        // Set value\n        // eslint-disable-next-line no-param-reassign\n        event.target.value = this.get(event);\n\n        // Trigger event\n        trigger(event.target, event.type === 'touchend' ? 'change' : 'input');\n    }\n}\n\nexport default RangeTouch;\n","// ==========================================================================\n// Type checking utils\n// ==========================================================================\n\nconst getConstructor = input => (input !== null && typeof input !== 'undefined' ? input.constructor : null);\nconst instanceOf = (input, constructor) => Boolean(input && constructor && input instanceof constructor);\n\nconst isNullOrUndefined = input => input === null || typeof input === 'undefined';\nconst isObject = input => getConstructor(input) === Object;\nconst isNumber = input => getConstructor(input) === Number && !Number.isNaN(input);\nconst isString = input => getConstructor(input) === String;\nconst isBoolean = input => getConstructor(input) === Boolean;\nconst isFunction = input => getConstructor(input) === Function;\nconst isArray = input => Array.isArray(input);\nconst isNodeList = input => instanceOf(input, NodeList);\nconst isElement = input => instanceOf(input, Element);\nconst isEvent = input => instanceOf(input, Event);\nconst isEmpty = input =>\n    isNullOrUndefined(input) ||\n    ((isString(input) || isArray(input) || isNodeList(input)) && !input.length) ||\n    (isObject(input) && !Object.keys(input).length);\n\nexport default {\n    nullOrUndefined: isNullOrUndefined,\n    object: isObject,\n    number: isNumber,\n    string: isString,\n    boolean: isBoolean,\n    function: isFunction,\n    array: isArray,\n    nodeList: isNodeList,\n    element: isElement,\n    event: isEvent,\n    empty: isEmpty,\n};\n","// Get the number of decimal places\nexport function getDecimalPlaces(value) {\n    const match = `${value}`.match(/(?:\\.(\\d+))?(?:[eE]([+-]?\\d+))?$/);\n\n    if (!match) {\n        return 0;\n    }\n\n    return Math.max(\n        0,\n        // Number of digits right of decimal point.\n        (match[1] ? match[1].length : 0) -\n            // Adjust for scientific notation.\n            (match[2] ? +match[2] : 0),\n    );\n}\n\n// Round to the nearest step\nexport function round(number, step) {\n    if (step < 1) {\n        const places = getDecimalPlaces(step);\n        return parseFloat(number.toFixed(places));\n    }\n    return Math.round(number / step) * step;\n}\n\nexport default { getDecimalPlaces, round };\n"]}